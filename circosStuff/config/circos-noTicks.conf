# 1.1 MINIMUM CIRCOS CONFIGURATION 
#
# This is a 'hello world' Circos tutorial. 
#
# Only required configuration elements are included.
#
# Subsequent tutorials in this section build on this example to
# generate a representative image with common elements found in Circos
# figures in the literature.

# Chromosome name, size and color definition
karyotype = mykaryotype.txt

# The chromosomes_unit value is used as a unit (suffix "u") to shorten
# values in other parts of the configuration file. Some parameters,
# such as ideogram and tick spacing, accept "u" suffixes, so instead of
#
# spacing = 10000000
#
# you can write
#
# spacing = 10u
#
# See ticks.conf for examples.

chromosomes_units = 10000000

# The default behaviour is to display all chromosomes defined in the
# karyotype file. In this example, I select only a subset.
#
# The 'chromosomes' parameter has several uses, and selecting which
# chromosomes to show is one of them. You can list them
#
# hs1;hs2;hs3;hs4
#
# or provide a regular expression that selects them based on a successful match
#
# /hs[1-4]$/
#
# The $ anchor is necessary, otherwise chromosomes like hs10, hs11 and
# hs20 are also matched.

chromosomes_display_default = yes
#chromosomes                 = /hs[1-9]$/;hs10;hs11;hs12

# The size of the ideogram on the figure can be adjusted using an
# absolute or relative magnification. Absolute scaling,
#
# hs1=0.5
#
# shrinks or expands the ideogram by a fixed factor. When the "r"
# suffix is used, the magnification becomes relative to the
# circumference of the figure. Thus, 
#
# hs1=0.5r 
#
# makes hs1 to occupy 50% of the figure. To uniformly distribute
# several ideogram within a fraction of the figure, use a regular
# expression that selects the ideograms and the "rn" suffix (relative
# normalized).
#
# /hs[234]/=0.5rn
#
# Will match hs2, hs3, hs4 and divide them evenly into 50% of the figure. Each ideogram will be about 16% of the figure.

#chromosomes_scale   = hs1=0.5r,/hs[234]/=0.5rn
chromosomes_scale   = /lg-.*$/=0.5rn,/LG.*$/=0.5rn

# By default, the scale progression is clockwise. You can set the
# global angle progression using 'angle_orientation' in the <image>
# block (clockwise or counterclockwise). To reverse it for one or
# several ideograms, use 'chromosomes-reverse'

#chromosomes_reverse = /lg-[1-9]$/;lg-10;lg-11;lg-12
chromosomes_reverse = /lg-.*$/


# The color of each ideogram is taken from the karyotype file. To
# change it, use 'chromosomes_color'.

#chromosomes_color   = hs1=red,hs2=orange,hs3=green,hs4=blue

# The default radial position for all ideograms is set by 'radius' in
# the <ideogram> block (see ideogram.conf). To change the value for
# specific ideograms, use chromosomes_radius.

#chromosomes_radius  = hs4:0.9r

# In the previous tutorial (1.3), I used chromosomes_colors to change
# the color of the ideograms. This approach works well when the only
# thing you want to do is change the color of the segments. 
#
# Another way to achieve this is to actually redefine the colors which
# are used to color the ideograms. The benefit of doing this is that
# whenever you refer to the color (which you can use by using the name
# of the chromosome), you get the custom value.
#
# If you look in the human karyotype file linked to above, you'll see
# that each chromosome's color is chrN where N is the number of the
# chromosome. Thus, hs1 has color chr1, hs2 has color chr2, and so
# on. For convenience, a color can be referenced using 'chr' and 'hs'
# prefixes (chr1 and hs1 are the same color).
#
# Colors are redefined by overwriting color definitions, which are
# found in the <colors> block. This block is included below from the
# colors_fonts_patterns.conf file, which contains all the default
# definitions. To overwrite colors, use a "*" suffix and provide a new
# value, which can be a lookup to another color.

#<colors>
#chr1* = red
#chr2* = orange
#chr3* = green
#chr4* = blue
#</colors>

<colors>
LG1 = chr1
LG2 = chr2
LG3 = chr3
LG4 = chr4
LG5 = chr5
LG6 = chr6
LG7 = chr7
LG8 = chr8
LG9 = chr9
LG10 = chr10
LG11 = chr11
LG12 = chr12
lg-12 = chr12
lg-11 = chr11
lg-10 = chr10
lg-9 = chr9
lg-8 = chr8
lg-7 = chr7
lg-6 = chr6
lg-5 = chr5
lg-4 = chr4
lg-3 = chr3
lg-2 = chr2
lg-1 = chr1
</colors>

# Links are defined in <link> blocks enclosed in a <links> block. The
# links start at a radial position defined by 'radius' and have their
# control point (adjusts curvature) at the radial position defined by
# 'bezier_radius'. In this example, I use the segmental duplication
# data set, which connects regions of similar sequence (90%+
# similarity, at least 1kb in size).

<links>

<link>
file          = mydata.txt
radius        = 0.99r
bezier_radius = 0r
color         = red
thickness     = 2

# Rule blocks can be added to any <link> or <plot> block and form a
# decision chain that changes how data points (e.g. links, histogram
# bins, scatter plot glyphs, etc) are formatted.

<rules>

# The decision chain is composed of one or more <rule> blocks.

<rule>

# Each rule has a condition, formatting statements and an optional
# 'flow' statement. If the condition is true, the rule is applied to
# the data point and no further rules are checked (unless
# flow=continue). If the condition is false, the next rule is checked.
#
# var(X) referrs to the value of variable X for the data point. Here 'intrachr' means intra-chromosomal.

condition     = var(intrachr)

# Any links that are intra-chromosomal will not be shown. Further rules are not tested.

show          = no

</rule>

<rule>

# This rule is applied to all remaining links, since its condition is always true.

condition     = 1

# The color of the link is set to the 2nd chromosome in the link
# coordinate (link's end). Here eval() is required so that the
# expression var(chr2) is evaluated (we want the result of var(chr2),
# not the color named "var(chr2)"). Note that for conditions,
# evaluation is automatic, but required for all other parameters.

color         = eval(var(chr2))

# After this rule is applied, the rule chain continues.

flow          = continue
</rule>

#<rule>

# If the link's start is on hs1...

#condition     = from(hs1)

# ...set the radial position of the link's start to be close to the ideogram.

#radius1       = 0.99r
#</rule>

#<rule>

# Same as the rule above, but applies to the end of the link.

#condition     = to(hs1)

# 'radius2' (like chr2, start2, end2) refers to the variable 'radius' of the end of the link.

#radius2       = 0.99r

#</rule>

</rules>

</link>

</links>



<<include ideogram-noTicks.conf>>

<<include ticks-noTicks.conf>>

################################################################
# The remaining content is standard and required. It is imported from
# default files in the Circos distribution.
#
# These should be present in every Circos configuration file and
# overridden as required. To see the content of these files, 
# look in etc/ in the Circos distribution.
#
# It's best to include these files using relative paths. This way, the
# files if not found under your current directory will be drawn from
# the Circos distribution. 
#
# As always, centralize all your inputs as much as possible.

<image>
# Included from Circos distribution.
<<include etc/image.conf>>                
</image>
file  = circos-noTicks.png

# RGB/HSV color definitions, color lists, location of fonts, fill
# patterns. Included from Circos distribution.
#
# In older versions of Circos, colors, fonts and patterns were
# included individually. Now, this is done from a central file. Make
# sure that you're not importing these values twice by having
#
# *** DO NOT DO THIS ***
# <colors>
# <<include etc/colors.conf>>
# <colors>
# **********************
<<include etc/colors_fonts_patterns.conf>> 

# Debugging, I/O an dother system parameters
# Included from Circos distribution.
<<include etc/housekeeping.conf>> 
