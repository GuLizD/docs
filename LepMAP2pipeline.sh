#!/bin/bash

##########################################################################################
# Set the following input parameters:

# lepMap2Bin: The absolute file path of the "bin" directory in your LepMAP2 installation
# folder. This is where all the LepMAP2 modules are kept.
lepMap2Bin="/home/benrancourt/Desktop/LepMAP2/binary/bin"


# dataPath: The directory path of the folder that any input files are in. This is also the 
# folder that the output files will be saved to. Since lots of output files are generated,
# I recommend using a dedicated directory that doesn't have anything else in it.
dataPath="/home/benrancourt/Downloads/r45-LepMAP2-final-copyForTesting/r45-inThreeStages/test2"

# inputCsvFilenameWithoutExtension: The base name of the input .csv file, without the
# ".csv" postfix. This name will be used to read the .csv input file, but it will also be
# used as a basis for all the subsequent output files that will be generated by this pipeline.
inputCsvFilenameWithoutExtension="r45-60592-p0.01"

# familyName: This is probably the least important input parameter of this script. This is 
# used as  a name for your input dataset when converting your input .csv file to .linkage 
# formatto be used as input for the LepMAP2 modules. The name you pick is important only
# to you.
familyName="test"

# missingDataIndicator: This parameter relates to the data in the original .csv data 
# file that you supplied. Some of the data in your original input .csv will likely be
# missing, in which case it might be represented as NA or "-" or maybe even be empty,
# or something like that to indicate that it is missing.
# Indicate what your .csv file uses to represent missing data.
missingDataIndicator="NA"

# TODO:
# - overall script info, how to run, the iterative process.
#
# Scenarios below:
#- skip the Filtering module because you've determined Filtering isn't needed
#- skip Filtering, SeparateChromosomes and JoinSingles because you've already run them and you just want to rerun OrderMarkers to see if you get better results (the OrderMarkers results are slightly different each time)
#- skip Filtering, SeparateChromosomes and JoinSingles because you've finished a complete run of the LepMAP2 pipeline, including the OrderMarkers module, and you've run the tabulate_OrderMarkers_results.R script on the output, and you now want to do a second pass of the OrderMarkers module on the output of the first pass. In this case you should also make sure you use the new map file generated by tabulate_OrderMarkers_results.R in addition to the new .csv data file.

# Choosing which LepMAP2 modules to run:
# You may wish to skip some of these LepMAP2 modules for any particular pass of the LepMAP2
# process. For example, if you're running the LepMAP2 pipeline on the output of a previous
# run of the LepMAP2 pipeline and using that output as input for this new run, you will
# probably want to skip the Filtering, SeparateChromosomes and JoinSingles Modules, since
# the markers have already been organized into linkage groups, and you want to make sure 
# you use the same groups as before. If you do skip these modules and go straight to the
# OrderMarkers module, make sure you have a map file (generated in tabulate_OrderMarkers_results.R
# along with the final .csv output file) to accompany your .csv input file. To indicate
# whether to skip or do any of the following modules, use:
# 1==do the module, 0==skip the module
doFiltering=0
doSeparateChromosomes=1
doJoinSingles=0
doOrderMarkers=0

# sizeLimitSeparateChr: This is used as an input parameter for the SeparateChromosomes
# module, which forms the Linkage Groups. Any Linkage Group with fewer than sizeLimit
# number of markers will be removed.
sizeLimitSeparateChr=10

# lodLimitSeparateChr: This is used as the LOD score limit input parameter for the
# SeparateChromosomes module.
# See LepMAP2 online documentation for a minimal description of how it uses pair-wise LOD
# scores between markers to assign markers into linkage groups.
lodLimitSeparateChr=10

# lodLimitJoinSingles: This is used as the LOD score limit input parameter for the
# JoinSingles module.
lodLimitJoinSingles=6


# End of input parameters.
##########################################################################################









# ############################################################
# These parameters don't need to be edited from use to use:

# make sure to end with a "/"
dataLocationWithFinalSlash=$dataPath"/"
lepMap2Bin=$lepMap2Bin"/"

inputFileNameMainPart=$inputCsvFilenameWithoutExtension
inputFileNameDotSuffix=".linkage"


logFileNameSuffix="-lepMAP2-log.txt"

# output file naming conventions
filteredOutputSuffix="-filtered.linkage"

mainInputFileSuffix=$inputFileNameDotSuffix
separateChromosomesOutputSuffix="-map.txt"
joinSinglesOutputSuffix="-map_js.txt"

orderMarkersOutputSuffixPt1="-map_js-chr"
orderMarkersOutputSuffixPt2=".SA.txt"
orderMarkersLogFileNameSuffixPt1="-orderMarkers-chr"
orderMarkersLogFileNameSuffixPt2="-lepMAP2-log.txt"

if [[ $doFiltering -eq 1 ]]
then
  mainInputFileSuffix=$filteredOutputSuffix
  separateChromosomesOutputSuffix="-filtered-map.txt"
  joinSinglesOutputSuffix="-filtered-map_js.txt"

  orderMarkersOutputSuffixPt1="-filtered-map_js-chr"
  orderMarkersLogFileNameSuffixPt1="-filtered-orderMarkers-chr"
fi

dl=$dataLocationWithFinalSlash

mainLog=$dl$inputFileNameMainPart$logFileNameSuffix


# ############################################################
# build the commands using above parameters

#default dataTolerance is 0.01
filterCommand="java -cp "$lepMap2Bin" Filtering data="$dl$inputFileNameMainPart$inputFileNameDotSuffix

separateChromosomesCommand="java -cp "$lepMap2Bin" SeparateChromosomes data="$dl$inputFileNameMainPart$mainInputFileSuffix" lodLimit="$lodLimitSeparateChr" sizeLimit="$sizeLimitSeparateChr

joinSinglesCommand="java -cp "$lepMap2Bin" JoinSingles "$dl$inputFileNameMainPart$separateChromosomesOutputSuffix" data="$dl$inputFileNameMainPart$mainInputFileSuffix" lodLimit="$lodLimitJoinSingles

orderMarkersCommandChooseLG="java -cp "$lepMap2Bin" OrderMarkers data="$dl$inputFileNameMainPart$mainInputFileSuffix" map="$dl$inputFileNameMainPart$joinSinglesOutputSuffix" alpha=0.1 polishWindow=100 filterWindow=10  sexAveraged=1 chromosome="

#-----


# ############################################################
function printMainLogFileDivider {
  echo " " | tee -a $mainLog  
  echo "===========================================================================" >> $mainLog
  echo "===========================================================================" >> $mainLog
  date | tee -a $mainLog
}


# ############################################################
function getNumLinkageGroups {
  # parameter $1 should be the name of the map file we will be checking to determine number of linkage groups

  # number of linkage groups = the number of unique lines (minus the header) in the file
  numLinkageGroups=`sort -u $dl$1 | wc -l` 
  numLinkageGroups=$((numLinkageGroups-1)) # - 1 because of the header line
}


# ############################################################
function countMarkersInLinkageGroups {
  ### Count the number of markers in each Linkage Group

  mapFileName=$1 # $1 retrieves the first input parameter to this function

  printMainLogFileDivider
  getNumLinkageGroups $mapFileName

  echo "Number of Linkage Groups in "$mapFileName": "$numLinkageGroups" (might be only "$((numLinkageGroups-1))" if some markers are in 0=no linkage group)" | tee -a $mainLog  

  for i in `seq 0 $numLinkageGroups`
  do 
    count=`grep -c "^$i$" $dataLocationWithFinalSlash$mapFileName`
    echo "Number of markers in LG "$i": "$count | tee -a $mainLog  
  done

}



# ############################################################
# execute the commands:

echo "Converting $inputCsvFilenameWithoutExtension.csv to .linkage format." | tee $mainLog
echo " " >> $mainLog

Rscript convert_csv_to_linkage.R $dataPath $inputCsvFilenameWithoutExtension $familyName $missingDataIndicator

 
echo "Beginning processing $inputFileNameMainPart$inputFileNameDotSuffix with LepMAP2 modules." | tee $mainLog
echo " " >> $mainLog

### Filtering 
if [[ $doFiltering -eq 1 ]]
then
  printMainLogFileDivider  
  echo "Beginning LepMAP2 Filtering module. Output filename: $inputFileNameMainPart$filteredOutputSuffix." | tee -a $mainLog
  echo " " >> $mainLog

  $filterCommand > $dl$inputFileNameMainPart$filteredOutputSuffix 2>> $mainLog
else
  echo " " | tee -a $mainLog
  echo "doFiltering==0, therefore skipping LepMAP2 Filtering module." | tee -a $mainLog
fi

### SeparateChromosomes
if [[ $doSeparateChromosomes -eq 1 ]]
then
  printMainLogFileDivider  
  echo "Beginning LepMAP2 SeparateChromosomes module. Output filename: $inputFileNameMainPart$separateChromosomesOutputSuffix." | tee -a $mainLog
  echo " " >> $mainLog

  $separateChromosomesCommand > $dl$inputFileNameMainPart$separateChromosomesOutputSuffix 2>> $mainLog

  ### Count the number of markers in each Linkage Group in the SeparateChromosomes map file
  countMarkersInLinkageGroups $inputFileNameMainPart$separateChromosomesOutputSuffix
else
  echo " " | tee -a $mainLog
  echo "doSeparateChromosomes==0, therefore skipping LepMAP2 SeparateChromosomes module." | tee -a $mainLog
fi


### JoinSingles
if [[ $doJoinSingles -eq 1 ]]
then
  printMainLogFileDivider  
  echo "Beginning LepMAP2 JoinSingles module. Output filename: $inputFileNameMainPart$joinSinglesOutputSuffix." | tee -a $mainLog
  echo " " >> $mainLog

  $joinSinglesCommand > $dl$inputFileNameMainPart$joinSinglesOutputSuffix 2>> $mainLog

  ### Count the number of markers in each Linkage Group after JoinSingles
  countMarkersInLinkageGroups $inputFileNameMainPart$joinSinglesOutputSuffix
else
  echo " " | tee -a $mainLog
  echo "doJoinSingles==0, therefore skipping LepMAP2 JoinSingles module." | tee -a $mainLog
fi


### =========================================
### OrderMarkers SA for each linkage group, in parallel:
if [[ $doOrderMarkers -eq 1 ]]
then

  printMainLogFileDivider  
  echo "Beginning LepMAP2 OrderMarkers SA modules. See individual Order Markers log files for each Linkage Group." | tee -a $mainLog

  if [[ $doJoinSingles -ne 1 ]]
  then
    # Just for information purposes, count the number of markers in each Linkage Group
    # in the input map file, if we haven't already done it.
    countMarkersInLinkageGroups $inputFileNameMainPart$joinSinglesOutputSuffix
  fi

  getNumLinkageGroups $inputFileNameMainPart$joinSinglesOutputSuffix
  counter=0
  ncore="$(( ($(grep -c ^processor /proc/cpuinfo) -4) ))"

  echo "running parallel processing"

  for i in `seq 1 $numLinkageGroups`
  do
    if [ $counter -ge $ncore ]; then
      wait
      #echo "wait reset"
      counter=0
    fi 

    date > $dl$inputFileNameMainPart$orderMarkersLogFileNameSuffixPt1$i$orderMarkersLogFileNameSuffixPt2
    echo "Beginning LepMAP2 OrderMarkers SA module. Output filename: $dl$inputFileNameMainPart$orderMarkersOutputSuffixPt1$i$orderMarkersOutputSuffixPt2." | tee -a $dl$inputFileNameMainPart$orderMarkersLogFileNameSuffixPt1$i$orderMarkersLogFileNameSuffixPt2
    echo " " >> $dl$inputFileNameMainPart$orderMarkersLogFileNameSuffixPt1$i$orderMarkersLogFileNameSuffixPt2

    $orderMarkersCommandChooseLG$i > $dl$inputFileNameMainPart$orderMarkersOutputSuffixPt1$i$orderMarkersOutputSuffixPt2 2>> $dl$inputFileNameMainPart$orderMarkersLogFileNameSuffixPt1$i$orderMarkersLogFileNameSuffixPt2 &
    counter=$(( $counter + 1 ))
  done
  wait

else
  echo " " | tee -a $mainLog
  echo "doOrderMarkers==0, therefore skipping LepMAP2 OrderMarkers module." | tee -a $mainLog
fi


### =========================================



### Done
printMainLogFileDivider

echo "Finished processing." | tee -a $mainLog

echo  -e "\033[33;5;7mPipeline $name has finished\033[0m"


 

